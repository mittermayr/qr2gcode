#
# QR2GCODE
# A QR Code to CNC (GRBL/GCODE) converter and generator
# January 2018 // Roman Mittermayr // mittermayr.com
# 
# Enjoyed this? Drop me a Satoshi if you like:
# 1CJPbRRRAuxJ1m3SuR3u6NAntzrc5EP5py
#

require 'rqrcode'

# Settings
x_home = 10 #mm
y_home = 10 #mm
spacing = 1 #mm
feed_rate = 600
z_depth = -0.3 #mm
z_hover = 5 #mm
z_safe = 20 #mm
EOL = "\r\n"
vertical_refining = true
add_border = true

$gcode = ""

def add(code)
  $gcode += code + EOL
end

unless ARGV.count.eql? 1
  puts "\r\nSyntax: ruby qr2gcode.rb <string>\r\n\r\n"
  abort
end

data = ARGV.first
# TODO check for input validity

qr = RQRCode::QRCode.new(data, :level => :h)
row_length = qr.modules.count

add("%")
add("(Header)")
add("(Generated by QR2GCode)")
add("(Header end.)")
add("G21") # units in mm
add("G00 G90 G80 G40 G49")
add("G1 Z#{z_safe} F")

x = 0
y = 0

is_drilling = false

matrix = Array.new(row_length){Array.new(row_length)}

qr.modules.each_with_index do |row, ri|
    row.each_with_index do |col, index|

        # Save matrix for later
        matrix[ri][index] = col

        is_next_active = false
        if index < row.count
          next_item = row[index+1]
          is_next_active = true if next_item
        end

        if col
          _x = x_home + x
          _y = y_home + y
          if is_drilling
            add("G1 X#{_x} Y#{_y} Z#{z_depth}")
          else # Not drilling, so stay above ground
            add("G1 X#{_x} Y#{_y} Z#{z_hover}")
          end
          add("G1 Z#{z_depth} F#{feed_rate}") unless is_drilling
          is_drilling = true
          unless is_next_active
            add("G1 Z#{z_hover} F#{feed_rate}")
            is_drilling = false
          end
        end
        x += spacing
    end
    # Lift up here, if drilling
    add("G1 Z#{z_hover} F#{feed_rate}") if is_drilling
    is_drilling = false
    y += spacing
    x = 0
end

if vertical_refining

  # Return to start, then do the same but with vertifal refinements
  add("G1 Z#{z_safe} F#{feed_rate}")
  add("G00 X0 Y0")

  x = 0
  y = 0

  for col in 0..row_length-1
    is_next_active = false
    for row in 0..row_length-1

      was_active_before = is_next_active
      is_next_active = false
      if row < row_length-1
        next_item = matrix[row+1][col]
        is_next_active = true if next_item
      end

      # If this is a 'single dot', then skip here
      # We are only refining lines, no point in working on that dot again
      single_dot = true
      single_dot = false if was_active_before
      single_dot = false if is_next_active
      next if single_dot

      if matrix[row][col]
        _x = x_home + x
        _y = y_home + y
        if is_drilling
          add("G1 X#{_x} Y#{_y} Z#{z_depth}")
        else # Not drilling, so stay above ground
          add("G1 X#{_x} Y#{_y} Z#{z_hover}")
        end
        add("G1 Z#{z_depth} F#{feed_rate}") unless is_drilling
        is_drilling = true
        unless is_next_active
          add("G1 Z#{z_hover} F#{feed_rate}")
          is_drilling = false
        end
      end
      y += spacing
    end

    # Lift up here, if drilling
    add("G1 Z#{z_hover} F#{feed_rate}") if is_drilling
    is_drilling = false
    x += spacing
    y = 0
    print "\n"
  end
end # of vertical_refining


if add_border
  padding = 5
  add("G1 X#{x_home-padding} Y#{y_home-padding} Z#{z_safe}")
  add("G1 Z#{z_depth}")
  add("G1 X#{x_home-padding} Y#{y_home+padding+(spacing*row_length)}")
  add("G1 X#{x_home+padding+(spacing*row_length)} Y#{y_home+padding+(spacing*row_length)}")
  add("G1 X#{x_home+padding+(spacing*row_length)} Y#{y_home-padding}")
  add("G1 X#{x_home-padding} Y#{y_home-padding}")
  add("G1 Z#{z_safe}")
end


add("G1 Z#{z_safe} F#{feed_rate}")
add("G00 X0 Y0")
add("M30")
add("%")

File.open("qrcode.ngc", "w") { |f| f.write($gcode) }
